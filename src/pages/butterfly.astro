---
const { delay = 0, duration = 18, size = 56, extraClass = "" } = Astro.props;
---

<div class={`butterfly ${extraClass}`}
     style={`--dur:${duration}s; --delay:${delay}s; --size:${size}px;`}>
  <!-- PASTE your SVG markup below; add classes to wings if needed -->
  <svg class="butterfly-svg" viewBox="0 0 100 100" aria-hidden="true">
    <!-- example structure you can adapt -->
    <rect x="48" y="30" width="4" height="40" rx="2" />
    <circle cx="50" cy="28" r="4" />
    <g class="wing wing-left"  style="transform-origin:50px 50px">
      <path d="M50,50 C20,10 5,30 10,50 C5,70 25,85 45,75 Z" />
    </g>
    <g class="wing wing-right" style="transform-origin:50px 50px">
      <path d="M50,50 C80,10 95,30 90,50 C95,70 75,85 55,75 Z" />
    </g>
  </svg>
</div>

<style>
  .butterfly {
    position: fixed; inset: 0; width: var(--size); height: var(--size);
    pointer-events: none; z-index: 40;
    offset-path: path("M 40 80 C 180 10, 320 150, 480 70 S 760 140, 920 40");
    offset-rotate: auto 90deg;
    animation: fly var(--dur) linear var(--delay) infinite alternate;
  }
  .butterfly-svg { width:100%; height:100%; }
  @keyframes fly { to { offset-distance: 100%; } }

  /* Wing flaps */
  .wing-left  { animation: flapLeft  0.25s ease-in-out infinite alternate; }
  .wing-right { animation: flapRight 0.25s ease-in-out infinite alternate; }
  @keyframes flapLeft  { from { transform: rotate(-14deg); } to { transform: rotate(6deg); } }
  @keyframes flapRight { from { transform: rotate(14deg);  } to { transform: rotate(-6deg);} }

  @media (prefers-reduced-motion: reduce) { .butterfly, .wing-left, .wing-right { animation: none !important; } }
</style>