---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import SideBar from "../components/SideBar.astro";
import Butterfly from "../components/butterfly.astro";
import { ViewTransitions } from "astro:transitions";
import { SITE_TITLE, SITE_DESCRIPTION, TRANSITION_API } from "../config";

const {
  image,
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  includeSidebar = true,
  sideBarActiveItemID,
  ogType,
} = Astro.props;

// Only show butterflies on the home page
const isHome = Astro.url.pathname === "/";
---

<!doctype html>
<html lang="en" data-theme="business">
  <head>
    <BaseHead title={title} description={description} image={image} ogType={ogType} />
    {TRANSITION_API && <ViewTransitions />}
  </head>

  <body>
    <div class="drawer lg:drawer-open bg-base-100 text-base-content">
      <input id="my-drawer" type="checkbox" class="drawer-toggle" />

      <div class="drawer-content bg-base-100">
        <Header title={SITE_TITLE} />
        <div class="md:flex md:justify-center">
          <main class="p-6 pt-10 lg:max-w-[900px] max-w-[100vw]">
            <slot />
          </main>
        </div>
        <Footer />
      </div>

      {includeSidebar && <SideBar sideBarActiveItemID={sideBarActiveItemID} />}
    </div>

    {isHome && (
      <>
        <!-- #1: wide roaming path (exits & re-enters) -->
        <Butterfly duration={46} size={56} extraClass="path-wander" />

        <!-- #2: path seeded near bottom-right (also exits & re-enters) -->
        <Butterfly duration={42} size={52} extraClass="path-from-br" />

        <!-- #3: mouse-following butterfly -->
        <div
          id="butterfly-layer"
          class="pointer-events-none fixed inset-0 z-[5]"
          aria-hidden="true"
        >
          <img
            id="butterfly-follower"
            src="/butterfly.svg"
            class="w-10 md:w-12 opacity-70 drop-shadow will-change-transform"
            alt=""
          />
        </div>

        <script is:inline>
          /* @ts-check */
          (function () {
            /** @type {HTMLImageElement | null} */
            const node = document.getElementById("butterfly-follower");
            if (!node) return;

            /** @type {HTMLImageElement} */
            const el = /** @type {HTMLImageElement} */ (node);

            // Respect reduced-motion preference
            const reduce = window.matchMedia("(prefers-reduced-motion: reduce)");
            if (reduce.matches) {
              el.style.transform = "translate(12px, 12px)";
              return;
            }

            // Initial position (center)
            let x = window.innerWidth / 2;
            let y = window.innerHeight / 2;
            let tx = x;
            let ty = y;

            // Tunables
            const follow = 0.12;        // smoothing factor (0.08â€“0.18 looks good)
            const maxStep = 60;         // clamp per-frame motion in px
            const faceDirection = true; // rotate toward travel direction

            function tick() {
              let dx = tx - x;
              let dy = ty - y;
              const dist = Math.hypot(dx, dy);

              if (dist > maxStep) {
                dx = (dx / dist) * maxStep;
                dy = (dy / dist) * maxStep;
              }

              x += dx * follow;
              y += dy * follow;

              const angle = faceDirection ? Math.atan2(dy, dx) * (180 / Math.PI) + 90 : 0;
              el.style.transform = `translate(${x}px, ${y}px) rotate(${angle}deg)`;

              requestAnimationFrame(tick);
            }

            function onMouseMove(e) {
              tx = e.clientX;
              ty = e.clientY;
            }

            function onTouchMove(e) {
              if (e.touches && e.touches[0]) {
                tx = e.touches[0].clientX;
                ty = e.touches[0].clientY;
              }
            }

            window.addEventListener("mousemove", onMouseMove, { passive: true });
            window.addEventListener("touchmove", onTouchMove, { passive: true });

            // Keep inside viewport after resize
            window.addEventListener("resize", () => {
              x = Math.min(Math.max(x, 0), window.innerWidth);
              y = Math.min(Math.max(y, 0), window.innerHeight);
            });

            requestAnimationFrame(tick);
          })();
        </script>
      </>
    )}
  </body>
</html>
